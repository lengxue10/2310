软件开发工具



软件开发
 
 软件开发工作的起点 初始要求  

软件开发的过程
第一个阶段 初始要求的提出 软件功能说明书(调查分析 第一个)
第二个阶段 总体设计 文件包括 结构图、模块清单、公用数据结构
第三个阶段 实现阶段 程序的编写与文档的编写 并行
第四个阶段 测试阶段或调试阶段 包括 模块的调试和整改软件的联调


软件开发工具的功能要求
1.认识与描述客观系统(需求分析阶段)
2.存储及管理开发过程中的信息
3.代码的编写或生成
4.文档的编制或生成
5.软件项目的管理(提供支持)    


项目管理包括进度、资源与费用、质量管理
项目管理是指与固定的生产线 变动性、时间性










软件开发工具，五项性能是特别重要的
表达能力或描述能力(首先考虑)
保持信息一致性的能力
使用的方便程度
工具的可靠程度
对硬件和软件环境的要求


工作阶段
分析工具(支持需求分析)-绘制数据流图flow、数据字典Dictionary / 3000
计划工具(项目主管人员),宏观角度看待
设计工具(出现最早、最多)-代码生成器
集成程度 单项工具和集成工具 集成化的软件开发工具-软件工作环境
硬件和软件 集成化工具


简述软件开发工具与计算机硬件、系统软件的关系
设计工具-特定软件
分析工具与计划工具-独立于机器与软件
集成化的软件开发工具-机器与软件
是否依赖于特定的计算机硬件或软件系统

需求与分析的工具-技术人员，最直接、最急需

程序编制 两个转换  关键
用户对软件功能的理解与程序员对软件功能的理解之间的转换 用户的理解到程序员的理解
人和机器之间的交流与协调问题  程序员的理解到程序的实现

软件危机
结构化程序设计、软件工程方法、面向对象的程序设计方法、即插即用的程序方法   面向开源软件和互联网平台

大型软件开发的困难 一致性、测试、工作进度、文档与代码的协调、版本更新
黑箱 程序有错不能证明程序没错
软件结构标准化
审核与回顾 代码和文档
困难产生的原因  大系统的复杂性，时间的因素，个人之间的组织与协调，变化的因素给软件开发工作


软件开发方法的发展
用户 提出需求、验收软件、使用软件、提出修改要求
程序员 编程、写文档、调试自己的程序，向项目负责人提交工作成果
项目负责人 分析用户需求形成的设计方案、向程序员分配任务、验收程序员的工作成果、对整个软件联调、向用户交互使用、接收与分析用户的修改要求，向程序员分配修改任务、验收修改成果、向用户提交新的版本或修改的结果
硬件 运行

20世纪60年代末 结构化程序设计思想 程序员
20世纪90年代 软件工具的思想与方法 项目负责人 加强项目管理者
20世纪70年代 Smalltalk 一切事物看做对象
20世纪80年代初期 引入软件工作环境的概念

程序的结构 处理单元、循环机制、二分决策机制  合理划分模块，结构良好
模块的功能 单一化、明确化   功能单一、联系少(避免逻辑耦合，仅限数据耦合)、规模小(调试)
结构化程序设计在实施过程中强调，基本思想
限制GOTO语句的使用，子程序只有一个入口和两个出口，风格尽量明确，清晰， 程序编写的同时完成相关文档的编撰
实施方法 自顶向下，逐层分解 主要对象 程序员
模块间的联系及互相影响称为耦合
缺点增大了程序工作量，降低了程序的运行效率

IBM AD/Cycle
需求分析或企业模型建立阶段，了解企业结构和功能，掌握组织及管理者的信息需求
	任务建立逻辑模型 包括领域或环境模型、数据模型、信息流通模型
分析与设计阶段 功能分解及数据分析，数据库的逻辑设计  建立流通的模型
	确定子系统或模块划分 屏幕设计、报表设计、数据库的物理设计 总体设计
编码阶段或编程阶段 程序编写 产生程序代码
测试阶段 已有代码检测和试用 模块或子系统测试
	安排测试方案、准备测试数据、收集与分析测试结果、并对出现问题的模块做修改和调整
使用及维护 检查与修正发现的错误

面向对象采用的方法
合理选择层次，控制系统复杂性
针对处理过程，设计程序时不必关系计算机的类型和内部结构，
只需对解题及实现算法的过程进行设计，algol、fortran、cobol。
封装性  静态属性，相关操作不必公开
面向对象的系统分析、系统设计、数据库管理系统
消息 参数
子类性质 遗传性
根本原因  认识框架

即插即用
基础 面向对象程序设计
组件程序设计、组合文件、宏观程序设计
专门生成软件组件，整个软件的结构

面向开源
应用领域的充分了解的复杂性和多样性 是否有利，决定作用
质量 文档和代码

好的软件
正确的实现功能，准确的给出结果 最重要
用户界面友好，符合用户时间的使用习惯于知识能力
足够的速度，符合用户要求，给出要求的处理结果
可靠性高  各种干扰下保持正常工作
程序易读，结构良好，文档齐全，保证系统易于修改

好的程序员
具有程序设计所需要的基本知识与技能，
深入了解本项目所在领域，熟悉软件开发技术的技术环境
使用统一标识符，
具有高度的组织纪律性和团队精神

建立好的项目组
有严格的成文的工作规范和文档标准
人员之间有严格的分工
每个项目都要事先制定详细的时间表，并严格执行



时序网络 描述系统状态与及其转换方式
数学和逻辑模型 描述客观世界状态与规律 逻辑模型 决策表和决策树
计算机模拟模型  强有力的概念模式
实体关系图 描述静态数据结构的概念模式 数据库设计
简述时序网络的作用。

信息库管理中最困难的问题 一致性 核心问题 
困难：信息需要不断更新，复杂软件系统不是由一个模块组成，组成完整的新版本，程序与使用手册之间一致性
哪些方面开展信息库的研究 信息库的内容、管理功能、如何保持一致性
包括：调查记录、原始数据、报表及单证的样本、绘制的各种图以及最后生成的系统说明书
信息库Repository 中心库、总库、主库 
特点：数据冗余度更低 随项目进度不断修改补充的数据集合
内容：项目管理有关信息、人员变更、资金投入、进度计划及实施情况
存放四大类信息
	软件应用的领域与环境的状况 实体
	设计成果，包括逻辑设计与物理设计的成果
	运行状况的记录
	有关项目管理与版本管理的信息 跨生命周期
编程阶段所有成果 框图、程序代码、变量说明、测试情况、验收报告、使用说明
文件系统基础数据库管理技术 即数据库Database   原义上 信息库
应保存：工作环境、功能需求、性能要求
逻辑阶段 各种调查材料 由此生成的各种文档
设计阶段 数据库与数据文件格式、数据字典、总体结构、程序模块的要求、各种接口及参数及设计方案
版本管理 各个版本的备份、每个版本的推出日期、与一切版本相比的变更说明
运行与使用情况  每次使用的时间、状态、问题、特别是有关错误与故障的记录情况
信息库技术涉及四个问题 信息库 内容、组织方式、管理功能、历史信息的处理方法 
设计成果：数据流程图、数据字典、系统结构图、数据库逻辑设计、各模块的设计要求，以及各种设计文档
运行状况记录包括：运行效率、作用、用户反映、故障情况、故障原因和处理情况
内容：系统状况、设计成果、运行状况记录和项目及版本管理信息
项目管理和版本管理：项目进度、过程、资源投入、人员分工、版本组织
管理方面 逻辑上统一，物理上分散
三种方式 最初集中存储 然后分散存储 最后逻辑上统一，物理上分散
功能：录入更新、使用查询、一致性维护
管理功能与一般数据系统的区别 信息之间逻辑联系的识别与记录 如何实现定量信息与文字信息的协调一致
处理历史信息 历史信息的数据量太大，历史信息格式不一致


用户界面 必须始终一致 主要功能通信 必须能提供帮助 随时掌握任务进展状况 让程序多干不要让用户多干 用户
IBM AD/Cycle 系统应用体系结构SAA 程序员接口CPI 通信接口CCS 用户接口CUA
通信接口包括 面向对象的接口、数据流、应用服务、作业管理、网络管理、数据安全控制
分析界面 需求信息  分析人员
编程界面 设计方案 代码文档 程序员
管理界面 变更要求 维护人员
人机交互手段 键盘操作、屏幕滚动、菜单选择、帮助系统、鼠标操作、色彩应用、数据录入、信息显示 八个
对于用户 界面就是系统本身
人机界面设计 权衡 灵活性 一致性


软件项目管理 核心要是质量 最终体现 控制和降低成本 基本目标 尽可能提高产品数量 保证系统按预定进度完成
大型项目不同于一般工程项目的特点 有版本更新问题
用户反馈信息  项目管理与版本管理的重要资源
版本管理 核心是保持两个一致性 方法：规定范围，收集方法，分工编写，测试文档
项目管理 日常生产管理  不同 更大的变动性、时间性
为达到项目管理的基本目标工具：工程计划网(计划评审技术)、甘特图、检查点方法、排队论 典型代表 建筑工程管理
基本目标：质量控制 ，保证进度，有效利用资源，控制与降低成本
特点：子任务多，关系复杂 任务不可重复 信息处理工作更突出 协调组织任务繁重


软件开发工具 存储和管理有关信息 机制和手段 
历史信息 跨生命周期  项目进度 版本更新
基本功能 
提供描述软件状况及其开发过程的概念模式 
提供存储和管理有关信息的机制和手段
帮助使用者编制、生成及修改更正文档
帮助使用者编写程序代码
对历史信息进行跨生命周期的管理
最重要的信息出口 文档生成和代码生成
中心位置 总控和人机界面 桥梁
技术上三个要点：面向使用者 保证信息的准确传递 保证系统的开放性或灵活性
面向用户 应用领域  静态模型SAA和动态模型AD/Cycle 概念模型
保证信息准确传递 抽象程度或详细程度、信息的结构与口径、信息的准确程度
引导使用者 概念模型

生成代码依据的资料
信息库种已经存放的有关资料
各种标准模块的框架和构件
使用者屏幕操作输入信息
比较容易：对话屏幕、输入屏幕、输出报表、菜单控制结构模块
比较困难：统计分析、数据加工、决策判断
输出代码 高级程序设计语言的代码 某种机器环境下可运行的机器指令
代码生成器 自动地或半自动地
从软件开发工具得到帮助来自：人机对话、代码生成、文档生成 
文档生成包括：文章(最难)、表格(最易)、图形(中等)
文档生成与代码生成：数量大，内容复杂 种类繁多，具有一定随意性
版本包括：版本的变化、功能改变、模块组成、文档状况、推出时间、用户数量、用户反映、封存情况
依据项目经验 项目数据库
软件项目管理的主要内容
	研究确定开发工作的方针和方法
	开发任务的划分与分工
	资源状况
	人员情况
	变更情况
	质量情况

软件开发工具购置方法与步骤
	明确够你软件开发工具目的与要求
	明确购买软件工具的环境条件与制约条件
	市场调查 
	对于可供选择的各种工具进行综合比较
	进行测试和检验
	证书签约购置
	安装与使用
组织管理工作包括：严格使用制度、记录使用的详细过程、培训使用人员和经常进行审计与评价工作
记录内容：系统运行的次数、时间，信息库的输入与更新时间，各种输出的质量与数量，使用者的反映与满意程度，各种故障的情况及处理
使用情况、信息库的情况 正确使用
机器的日志功能自动完成，也可以用手工完成
审计范围包括：工具的使用环境、人员、工作负担、工作效果、存在问题、改进方向等 基础：日常使用记录信息
审计：系统的运行状态及效率进行检测与评价 意义：更好改进系统
购置审计主要内容：希望利用的功能，投入的资金和人力，定量计算的收益和无法定量计算的收益，从经济上看是否合理
开发工具审计主要内容：有没有出现错，数据丢失或错误的情况，误操作引起的异常，纠正和补救措施效果如何
自行开发软件工具原则开拓新功能 根本性制约 设置有限的现实的目标
不成功商品化软件 使用手册复杂
自行开发工具注意问题
设置有限的现实的目标
坚持短小实用，逐步积累，避免期望过高，贪大求全
注意文档的齐全与资料的积累
自用软件开发工具与商品化软件工具区别 为自己所用，根据实际需要帮助的环节 针对性差，开发任务重难度大
我国软件 软件工程及方法学  实践
软件开发工具发展趋势 智能化、网络化、一体化、标准化
通过网络 共享知识、互通信息 软件的重用、知识重用
一体化 提供理论基础 信息库内容及处理功能的讨论 困难 软件开发过程与相关信息认识深度
	发生、变化、关系、一致性 
神经网络技术 智能化  智能化：人工智能和神经网络
标准化 软件部件和组合软件的想法
不确定因素 经验与知识来补充或加工
2008年 XMF Mosaic 软件开发工具
Turbo Pascal，Emacs  结构化时代
Google Code Search 互联网时代
JVM CVS 面向对象时代和互联网时代的交集
GWT 互联网时代
较早期软件开发工具，开发过程中 特点基于某一种计算机语言 交互，文档管理，代码版本管理 
软件开发工具 质量和效率  特点：多样性和趋同性
庞大族系 计算机语言 开发平台
发展潜力：VB最差，Java最高
开发效率：VC最高，PB最高
执行效率：C++最高
跨平台最好：Java
VB：COM，ActiveX VC：COM，ActiveX，CORBA PB：COM，JavaBean，Laguar，UserObject
C++：COMM，ActiveX，CORBA Java：JavaBean，CORBA，ActiveX
java：面向对象，开发效率，发展潜力 最高，代码执行效率最低
组件技术：JavaBean，CORBA，ActiveX
数据库：JDBC
趋势：抽象化、集成化、智能化程度
网络和Web技术：Servlet API，Java Bean API，JSP
JINI规范数据系统底层开发支持
Visual Studio和Eclipse相比
Eclipse：面向各平台开发者，大平台，小核心，多插件-灵活性 Visual Studio 运行速度快
精力集中 优化代码逻辑和算法
集成开发环境(IDE) 项目复杂，开发周期长
Eclipse：Java 插件：帮助组件、团队支持组件 开放源代码，基于Java 可扩展应用程序开发环境
	一个框架和一组服务，通过插件组件构建开发环境
	支持插件 版本控制和配置管理
工作空间负责管理用户资源的插件：包括用户创建的项目、项目中的文件、文件变更和其他资源 
	用户电脑硬盘工作资料 项目为单位组织文件和目录，树结构
结构包括：运行时内核，工作空间，工作台，其他插件
工作台 提供用户界面 整体架构和可扩展的用户界面 包括菜单栏、工具栏、透视图
JDK CDT(默认透视图C/C++)
工具栏分为主工具栏，视图工具栏
透视图 视图和编辑器 初始设置和界面布局
主工具栏内容随活动透视图改变 菜单栏对整个集成开发环境操作
资源管理器  导航器视图
视图包括：导航器视图、大纲视图、控制台视图
左侧区域：Project Explorer视图和C/C++ Projects视图
视图 对象的详细信息
导航器视图(文件列表)、大纲视图(纲要、函数、变量)、控制台视图(输出)、错误视图(显示警告）、搜索视图、任务视图(未完成任务，TODO开头的注释标记)
编辑器是工作台的一个可视化组件，所有视图共享同一组编辑器，编辑器与工作台紧密集成
C/C++编辑器、文本编辑器、任务编辑器、二进制文件编辑器、Web浏览器
Web浏览器 打开网页文件
Alt+Left 快速返回最近浏览的编辑器
反向定位到各个视图对应的位置
小程序 项目  组织单位 项目 以项目为单位 


项目中封装：源代码、注释、配置文件、各种文件夹
导入一个项目基本步骤
点击菜单栏上的File菜单，选择Import，打开General文件夹，选择Existing Projects into Workspacce，点击Next进入到下一步，在Select root directory选项中选择项目所在目录下的hello项目，点击Finish。
如何关闭Eclipse中暂时不用的项目
在资源管理器中，选中需要关闭的项目，单击右键，在弹出的菜单中，通过关闭项目(Close Project)选项关闭该项目
支持从外部导入项目、归档文件、文件系统和首选项文件
查找上一个的 Ctrl+Shift+K 下一个Ctrl+K 查找Ctrl+F Alt+Shift+R 重命名 F11调试 Ctrl+F11运行
Ctrl+Alt+H 调用层次结构 Ctrl+Shift+T元素选项
Ctrl+Z Ctrl+C Ctrl+X Ctrl+A Ctrl+V Ctrl+Y F12激活编辑器 Ctrl+F7切换视图 Ctrl+F6切换编辑器
Ctrl+F8 切换透视图 Alt+<- 后退一步 Alt+->前进一步 Ctrl+H 打开搜索对话框 Ctrl+S Ctrl+P打印
帮助文档底部4个标签 内容、索引、搜索结果、书签

C语言面向过程 既有高级语言的特点又有汇编语言的特点允许直接访问物理地址
.c编译为.exe
MinGW 不支持Linux平台运行  不指定完整路径-环境变量
支持 编译Java、C语言、C++程序
Eclipse CDT要运行C和C++，必须装一个C、C++编译器
快速定位程序各个元素包括代码：层次结构、调用关系、继承关系
浏览器 Ctrl+Shift+T 打开菜单 Ctrl+Alt+I 打开文件包含浏览器 F4打开类型层次结构
Eclipse
	变量定位位置 变量声明功能 F3打开变量声明功能
	C语言引用头文件 尖括号或者引号
	大型程序中的函数参数传递过程 调用层次结构功能
	快速打开程序中已经在使用的特定数据类型及其相关继承结构的方法
	命名空间、类、结构、变量定义为元素
	浏览功能可以浏览函数的定义与调用层次关系
	类型层次结构视图，右侧数据类型所包含的属性与方法
	重命名功能解决了：变量、类、函数等 位于菜单栏中的重构
	重构功能系统范围内的代码更改
	抽取常量 数字、字符等定义为常量，调用和修改变得简单 重构
	Eclipse CDT Search功能 执行文件、任务和C/C++搜索功能

GDB是GNU开源组织发布的程序调试工具
程序调试 语法错误和逻辑错误	
GDB可以帮用户实现的功能
	启动C/C++程序
	用户指定调试的断点处停住
	程序停住是，可以检查此时引起程序中断的原因
	动态改变程序执行环境
	单步调试程序
安装GOB 版本列表应选择Bin文件 在浏览器界面 Files 激活断点的视图 Toggle Breakpoint 
Eclipse CDT调试器允许用户 设置断点、暂停、单步执行代码
断点 非激活 白色透明 激活蓝色 禁用 白色圆圈 表示方法 蓝色箭头加圆圈
运行到断点时自动暂停显示程序当前状态
Eclipse支持的断点包括：行断点、方法断点(第一行)、事件断点	
删除断点方式：鼠标双击、鼠标右键弹出菜单，在断点视图中
GOB 添加或删除Other 激活断点Enable Breakpoint
事件断点 特定事件：异常触发、线程启动、线程退出
Eclipse四种可用动作：声音、日志、重新启动程序、外部工具动作
Ctrl+F2 中断调试
单步遍历主要包括：单步跳入、单步跳过、单步返回
Eclipse调试透视图包括：调试视图、变量视图、断点视图、编辑器、大纲视图、控制台视图
Eclipse CDT 任务标签格式 TODO Normal 首选项：外观、键、搜索、工作空间、浏览器
Eclipsetest文件全屏显示 双击 test
工具栏默认解锁状态 竖直的直线
Eclipse CDT完成快捷键 同时按下=和Ctrl 首选项打开定制快捷键General
Customize Perspective 选择定制透视图
定制透视图四个标签 工具栏，菜单栏、命令组、快捷方式
Eclipse代码模版：${} 三个维度注释、代码、文件
文件恢复到历史记录按钮 Replace 旧版本与目前文件对比差异 浅绿色 Restore恢复已删除文件


CVS 开放 版本控制软件 对程序冻结和解冻 管理员 集中管理 遗憾技术支持
安全性较差 VSS
单一文件版本维护系统 SCCS
支持绝大多数操作系统 Rational Clear Case
管理、维护增高企业软件资产的 Hansky Firefly
Borland StarTeam 集成环境配置和变更
ClearCase 包括版本控制、建立管理、工作空间管理、过程控制
采用版本控制有助于：开发环境与测试环境运行环境有效隔离
CVS About页面 产品版本、来源、服务状态
资源文件的集合 资源库  开发的代码 
CVS 访问权限 管理权限包括 更改和删除  安全性
蓝色向左箭头 本地文件没有更改，CVS上的文件有更改
静态影像 快照
标识名称 标签
备份修改反映到资源库种 提交commit
处于资源库之外的软件  输入
本地代码与资源库一致 代码同步
不直接修改服务端 工作备份

Eclipse PDE插件开发环境 新增了透视图帮助开发者创建、开发、测试、调试、部署插件
插件环境中自行协调不同插件的命名和属性设置
执行环境 概述页面
显示插件 运行时页面
当前插件所需插件列表 依懒性页面
一般信息和执行环境 概述页面
准确性 pde的重要任务 运行时类路径 包括大纲清单编辑器(多页面编辑器)
清单编辑概述页面、依赖性页面、运行时页面、扩展页面、扩展点页面、构建页面
扩展点提供负责性和功能性有所不同的模版
PDE提供的插件模版
	Hello word模版
	带有样本帮助内容的插件
	具有编辑器的插件
	具有弹出菜单的插件
	具有多页面编辑器的插件
	具有视图的插件
	具有属性页面的插件
	具有增量项目构建器的插件
插件用户界面 视图、编辑器、透视图
快速开发图形编辑器 GEF 代码管理类插件Log4E 语言类插件PDT 建模类插件MDT
EMF 输入、代码生成、默认的持久化机制和模型编辑器 建模框架
Visual Editor 图形化编辑框架

Rational Rose 出现在面向对象时代 三层解决方案：用户接口层、事物处理原则层、数据层
逻辑设计 类图(静态信息)、顺序图、交互图 用例视图设计 用例图、活动图、状态图 物理设计 部署图
用例图表现系统静态信息，顺序图、交互图表现动态信息
第一个界面选择编程语言
用例视图通过用例描述系统的功能性要求，与实现无关
用例之间的关系：扩展(另一个用例进行扩展的)、包含(大量公共行为，独立建模)、泛化关系(子用例到父用例)
用例图包括的关系
角色与用例之间的关联关系，角色之间的泛化关系，用例与用例之间的扩展、包含、泛化关系
顺序图强调消息时间
协作图 强调参加交互的各对象的组织
配置图 描述实施整个系统的结构与层次
活动图本质流程图，活动、判定点、先后顺序、分支
特点：
支持采用基于组件的开发
系统分析到系统实现双向工程
支持UML的建模
支持多语言开发
支持双向工程
全面的团队支持
简单易用
提供框架向导
提供扩展接口


UML统一模型语言 面向对象的技术和方法  建立各种所需的文档 功能强大、易于表达、定义良好且普遍适用
表达项目需求、系统设计、部署说明、代码结构
图表包括：用例图、类图、对象图、状态图、顺序图、协作图、活动图、组件图、配置图
组成包括：视图、图表、模型元素、基本机制
UML五个阶段：需求分析、分析、设计、编程、测试
外部使用者 用例视图 包括用例图、活动图、顺序图
系统的静态结构和动态协作  逻辑视图 模型图


面向对象 优点 软件维护的复杂性和提高生产效率
客观世界的任何事物都是对象，对象是客观世界的抽象
对象是一些属性及操作行为的封装体，是问题空间中一些东西的抽象
抽象是事物或现象的简括描述，突出事物或现象之间的共性
属性是用于描述类和对象所固有的特征
类是对一组几乎相同的对象的描述，方法是驻留在对象中的过程，把对象按相同特征区分
多态不同事物具有不同的表现形势
结构化方法侧重分析流程，面向对象分析方法侧重建模
面向对象方法 不具备的重要特征 抽象性
继承 子类和父类
程序设计 描述事物 数据和对数据处理的统一整体，也称封装
当前信息系统 特征：多样性、复杂性、相互关联性
面向对象的方法称OO方法包括面向对象分析OOA，面向对象设计OOD，面向对象程序设计OOP
面向对象方法完成一件事就是向有关对象发送消息


组件 目标粗粒度的复用 核心 接口  很快生成定制的应用程序






















 