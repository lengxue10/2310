操作系统必须完成的两个主要目标 
	与硬件部分相互作用  
	为运行在计算机系统上的应用程序提供执行环境

简述操心系统资源管理的作用
    保证用户程序的顺利执行
    使计算机系统资源得到经可能高效的利用，保证计算机系统的高性能
简述操作系统在资源管理方面的功能
	处理机管理、内存管理、设备管理、文件管理





引起中断的原因
人为设置； 程序性事故、硬件故障、I/O设备、外部事件

什么是中断
改变处理器执行命令顺序的一种事件，这样的事件与CPU芯片内外部硬件电路产生的电信号相对应。

中断的处理过程
系统关闭中断、转中断处理程序、执行中断处理子列程、恢复现场开中断

系统调用的类型
进程控制类
文件操纵类
设备管理类
通信类
信息维护类


调度算法 问答题 
短进程优先调度算法SPF
优先权度算法
周期时间=等待时间+运行时间  等待时间=开始运行时间-到达时间

实时进程调度需要提供的条件 就绪、开始截止、完成截止、处理时间、资源要求、优先级

实现实时调度的基本条件 
提供必要的调度信息、系统处理能力强、采用抢占式调度机制、具有快速切换机制


多处理器调度方式
自调度 易移植、提高CPU利用率 缺点瓶颈问题、低效性、线程切换频繁 互斥访问的公共就绪队列，最简单
成组调度 减少线程切换和调度开销  面向应用程序和线程
专用处理器分配 加速运行程序的运行速度，避免线程切换

死锁的条件 互斥、请求和保持、不剥夺、环路等待条件
死锁 多个进程竞争资源而引起进程不能推进的僵死状态  原因：多个线程竞争资源
处理死锁的方法 预防死锁、避免死锁、检测并解除死锁和忽略死锁问题

内存管理的目标
内存分配、内存回收、提高内存空间的利用率和内存的访问速度
存储器 局部性、高层次
局部性原理：空间局部性(访问某个单元，附件的存储单元也将被访问) 时间局部性(指令一旦执行，不久后可能再次执行)

内存回收的流程？
释放一块连续的内存区域
如果被释放区域与其他空闲区相邻，则合并空闲区
修改空闲分区链

使用空闲分区表的缺点是什么？
若设置太多表项，会浪费内存空间，设置太小的表项，当空闲分区较多时无法记录所有空闲分区的情况，在实现时数组的大小不容易确定


页：将一个逻辑地址空间分成若干个大小相等的片，成为页
页框：将物理内存空间分成与页大小相同的若干个存储块，成为页框或页帧
页表：系统为进程建立的数据结构，作用是实现页号到页框号的映射
页内碎片：最后一个页一般装不满一个页框，而形成了不可利用的碎片
分页存储：在为进程分配内存时，以页框为单位将进程中的若干页分别装入多个可以不相邻得页框中
影响要么大小设计的因素？管理内存的开销和内存的利用率
分页的逻辑地址结构包括：页号P和页内偏移量W
逻辑地址转换物理地址 地址变换机构


页分配和置换策略有 
固定分配局部置换、可变分配全局置换、可变分配局部置换

局部置换：从请求调页进程本身的内存页重选择一个淘汰的页，腾出内存页框，装入请求调入的页
全局置换：从系统重所有进程的内存页重选择被淘汰的页
固定分配策略：进程在创建道撤销的过程中，为进程分配的页框数保持不变
可变分配：为进程分配的页框数是可变的
最少页框数：进程正常运行所需要的最小的页框数


预防抖动的方法
采用局部置换策略
在CPU调度程序中引入工作集
挂起若干进程

分段机制的优点
方便编程、分段共享、分段保护、动态链接、以及存储空间的动态增长


段页式存储锅里的基本原理
用户进程逻辑空间划分成若干个段，每个段再划分成若干个页。进程一页为单位在物理内存中离散存放，每个段中被离散存放的页具有逻辑相关性。为实现段页式存储管理的地址映射，操作系统为每个进程建立一个表，为进程的每个段建立一个页表。进程段表的每一个段表项存放某个段的页表起始指针和页表长度

采用段页式内存管理的好处 
程序员可以使用分段的逻辑地址，而时间进程却以页为单位存放物理地址


采用段页式存储管理方式，为了获得一条指令或数据，需要3次访问内存
第一次访问对象是内存中的段表，从中取得页表开始地址
第二次访问对象是内存中的页表，从中取该页的物理块号，并将该块号与页内地址一切形成指令或数据的物理地址
第三次根据物理地址访问具体的内存地址，取出指令或数据

分页和分段的区别
分页按物理单位划分，分段按逻辑单位分
页的大小是固定的，段的大小不固定
分页的地址是一维的，分段的地址是二维

分段系统的地址变换过程，求相应的物理地址的步骤
	若已知逻辑单元的地址s:d,求相应的物理地址的步骤
	1.以段号为索引，从段表总找到段号为s的段表项
	2.从找到的段表项中读出s段的基地址和段大小
	3.如果d<=段大小则将该段基址与段内偏移d相加，得到与逻辑单元s:d相应的物理单元的地址

两个块称为伙伴的条件
	具有相同的大小，记为b
	他们的物理地址是连续的，起始地址是2b的整数倍



设备控制器
	是CPU与I/O设备之间的接口，介绍I/O的命令并控制设备完成I/O工作
	设备控制器是一个可编址设备，连接多个设备是可有多个地址。控制器可以直接做在主板上，也可以做成插卡插在主板上

设备控制器的功能
	接收和识别命令、数据交换、设备状态的了解和报告、地址识别、数据缓冲、差错控制

设备控制器的逻辑构成：
	设备控制器与处理机的接口，包括数据线、控制线、地址线
	设备控制器与设备的接口，3类信号数据、状态和控制信号
	I/O逻辑，指令译码器和地址译码器，将CPU的命令和地址分别译码控制指令设备进行I/O操作

关于设备控制器，程序员需要了解什么？
	设备控制器的结构，编写设备驱动程序要针对具体的设备控制器，了解设备控制器中寄存器、端口的名称、地址和访问方式，以及使用方式。

I/O通道和IO通道的作用
	一种特殊的处理机，具有执行I/O指令的能力，并通过执行通道程序来控制I/O操作
	从控制器I/O的任务中解脱，是CPU与I/O并行工作，提高CPU的利用率和系统的吞吐量


实现主机与设备控制器之间成块数据的传送，DMA控制器4类寄存器
	命令状态控制寄存器CR
	内存地址寄存器MRA 内存地址
	数据计数器DC
	数据寄存器DR

引入缓冲区的原因和作用
	处理数据流的生产者和消费者之间的速度差异
	协调传输数据大小不一致的设备
引入缓冲除了可以缓和CPU与I/O设备之间速度不匹配的矛盾，还能降低对CPU中断频率的要求，
放宽对中断响应的限制，提高CPU和I/O设备的并行性	


为了是系统正常工作，分配设备应该考虑哪些因素
设备的固有属性、设备分配算法、设备分配的安全性

设备独立性的概念
	提高操作系统的可适应性和可扩展性，在现代操作系统中都毫无例外地实现了设备独立性，也成设备的无关性。
	其基本含义是应用程序独立于具体使用的物理设备。
设备独立性的好处
	应用程序与物理设备无关，易于处理输入输出设备的故障，提高系统的可靠性，增加了设备分配的灵活性
设备软件完成的主要功能
	执行所有设备的公有操作和向用户层软件通过统一的接口

IO通道的系统，进行设备分配的步骤
	分配设备、分配控制器、分配通道

系统分配程序进行设备分配的过程
	设备的物理名，查找系统设备表，从中找出该设备的设备控制表，检查设备控制表中的这边状态，若设备忙，则将进程阻塞在该设备的阻塞队列中，若设备闲，则根据设备分配算法将设备分配给进程。

SPOOLing
	在多道程序的环境下，利用一道程序来模拟脱机输入时的外围控制机的功能，把低速I/O设备上的数据传送到高速输出磁盘上
	再利用一道程序来模拟脱机输出是外围控制机的功能，把数据从磁盘传送到低速输出设备上。
如何利用SPOOLing实现共享打印机
	1由输出进程在输出井中申请空闲盘块区，并将打印的数送入其中
	2.输出进程在为用户申请并填写一张用户请求打印表；降大雨数据从输出井并送到打印机缓冲区；打印；打印完毕，若打印队列部位空则转到开始步骤
SPOOLing特点		
	提高了I/O速度、将独占设备改造为共享设备、实现了虚拟设备功能
组成
	输入井输出井、输入缓冲区和输出缓冲区、输入进程和输出进程、请求I/O队列

I/O管理软件将设备管理软件从上而下分为四个层次
	用户管理层、与设备无关的软件层、设备驱动程序(设备服务程序和中断处理程序)、中断处理层

设备管理软件实现哪些功能
	实现I/O设备的独立性、错误处理、异步传输、缓冲管理、设备的分配和释放、实现I/O控制方式

I/O中断程序中断的处理过程
	用户进程在发出I/O请求后，由于等待I/O的完成而被阻塞。CPU转去执行其他任务，当I/O任务完成，控制器想CPU发中断请求信号，CPU转去执行中断处理程序，有中断处理程序唤醒被阻塞的用户进程。

设备驱动程序的定义及主要任务
	I/O进程与设备控制器之间的通讯程序，主要任务是接受上层软件发来的抽象I/O请求，如read或write命令，把它们转换成具体的要求后
	并发送给设备控制器，启动设备去执行。此外，他也将有设备控制器发来的信号传送给上层软件

磁盘驱动程序的工作内容
	1.计算出请求块的物理地址
	2.检查驱动器点击是否正在运转
	3.检查磁头臂是否定位在正确的柱面
	4.确定需要哪些控制器命令及命令的执行顺序
	5.向设备控制器的设备寄存器写入命令
	6.I/O完成后，向上层软件传送数据

设备无关I/O软件的主要功能
	设备命名、设备保护、提供独立于设备的块大小、为块设备和字符设备提供必要的缓冲技术、块设备的存储分配、分配和释放独立设备、错误处理

磁盘访问时间的组成
	寻道时间(指定磁道)、旋转延迟时间(扇区到磁头)、传输时间(写入、读出)

固定头磁盘
	每条磁道上都有读/写磁头，所有磁头都装在一个刚性臂中，通过这些磁头可访问各磁道且进行读写，有效提高了磁盘I/O速度大容量磁盘	
移动头磁盘
	每个盘面仅配有一个磁头，页被装入磁臂中，为了能访问该盘面的所有磁道，该磁头必须移动并进行寻道，移动磁盘仅能以串行方式读写，致使磁盘读写速度慢，中小型磁盘

磁盘调度算法
	先来先服务FCFS 进程请求的先后顺序
	最短寻道时间优先SSTF 要求访问的磁道与当前磁头所在的磁道距离最近，寻道时间最短、
	扫描算法SCAN 电梯调度算法 为防止饥饿现象，不仅考虑要访问的磁道与当前磁道的距离，更优先考虑磁头当前的移动方向的算法，直达尽头再转换方向
	循环扫描算法CSCAN 磁头单向移动
	NStepScan和FSCAN调度算法				

饥饿现象
	在最短寻道时间优先SSTF算法中，只要不断有新的进程的请求到达，且其所要访问的磁道与磁头当前所在磁道的距离较近，这种新进程
	的I/O请求必然被优先满足，导致所要访问的磁道距离与磁头所在位置较远的磁盘任务总是不能得到调度的现象

磁臂粘着现象
	在SSTF、SCAN及CSCAN几种调度算法中，都可能出现磁臂留在某处不动的情况，例如：有一个或几个进程对某一磁道有较高的访问频率
	，即这些进程反复请求对某一磁道的I/O操作，从而垄断了整个磁盘设备

提高磁盘I/O速度的方法
	提前读、延迟写、优化物理块的分布、虚拟盘、磁盘高速缓存

文件的顺序存取和随机存取的区别
顺序存取：从文件开始处读取，不能不按顺序存取
随机存取：任意顺序读取

文件的属性：
为了方便管理，除了文件名和文件数据外，文件还会保存其他与文件相关的信息，如创建日期、文件大小、修改时间、隐藏标志、记录长度	


树形目录的优缺点
便于文件的分类，层次结构清晰，便于管理和保护，解决了重名问题，查找速度快。缺点是找要一个文件按路径名逐层检查，由于每个文件都放在外存中，多次访问磁盘会影响速度，结构相对复杂

两级目录的优缺点
解决了文件的重名和文件共享问题，查找时间降低。缺点是增加了系统的存储开销













